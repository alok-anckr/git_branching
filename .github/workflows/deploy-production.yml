name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  deploy:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: production
      url: https://yourapp.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm --filter web build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: production

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
          echo "Deployment completed!"
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Health check
          curl -f https://yourapp.com/healthcheck || exit 1
          # Add more critical checks
          echo "Smoke tests passed!"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          # Extract version from package.json or use date-based versioning
          VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD > CHANGELOG.txt
          echo "Generated changelog"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.txt
          draft: false
          prerelease: false

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests, create-release]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]] && [[ "${{ needs.smoke-tests.result }}" == "success" ]]; then
            echo "✅ Production deployment successful!"
            # Add notification service here (Slack, Discord, PagerDuty, etc.)
          else
            echo "❌ Production deployment failed!"
            # Add critical alert notification here
          fi

  monitor:
    name: Monitor Deployment
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 15
    
    steps:
      - name: Monitor application health
        run: |
          echo "Monitoring production deployment..."
          # Monitor for 5 minutes after deployment
          for i in {1..10}; do
            echo "Health check attempt $i/10"
            curl -f https://yourapp.com/healthcheck || exit 1
            sleep 30
          done
          echo "Deployment is stable!"

