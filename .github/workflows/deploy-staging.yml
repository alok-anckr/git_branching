name: Deploy to Staging

on:
  push:
    branches:
      - staging
  workflow_dispatch:

concurrency:
  group: deploy-staging
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  deploy:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: staging
      url: https://staging.yourapp.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm --filter web build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: staging

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          echo "Deployment completed!"
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: pnpm --filter e2e test
        env:
          BASE_URL: https://staging.yourapp.com
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-staging
          path: apps/e2e/test-results/
          retention-days: 14

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-report-staging
          path: apps/e2e/playwright-report/
          retention-days: 14

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          # Examples:
          # - Health check endpoint
          # - Critical user flows
          # - API availability checks
          curl -f https://staging.yourapp.com/healthcheck || exit 1
          echo "Smoke tests passed!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, e2e-tests, smoke-tests]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]] && [[ "${{ needs.e2e-tests.result }}" == "success" ]] && [[ "${{ needs.smoke-tests.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful!"
            # Add notification service here (Slack, Discord, etc.)
          else
            echo "❌ Staging deployment failed!"
            # Add notification service here
          fi

